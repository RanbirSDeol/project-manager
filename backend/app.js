// Import required modules
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const sqlite = require('sqlite3').verbose();
const multer = require('multer');
const fs = require('fs');
const path = require('path');

// Initialize express app
const app = express();
const PORT = 5000;

// Ensure the uploads folder exists
const uploadsPath = './uploads';
if (!fs.existsSync(uploadsPath)) {
    fs.mkdirSync(uploadsPath);
}

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Connect to SQLite database (projects.db)
const db = new sqlite.Database('./db/projects.db', (err) => {
    if (err) {
        console.error('Error opening database:', err.message);
    } else {
        console.log('Connected to the SQLite database.');
    }
});

// Set up storage configuration for file uploads (using Multer)
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, './uploads');  // Store uploaded images in the "uploads" folder
    },
    filename: (req, file, cb) => {
        const fileExtension = path.extname(file.originalname); // Get file extension
        cb(null, Date.now() + fileExtension);  // Generate unique filename based on timestamp
    }
});

const upload = multer({ storage: storage });

// | CRUD |

// |GET|: all projects
app.get('/projects', (req, res) => {
    // Fetch all projects from the database
    db.all('SELECT * FROM projects', [], (err, rows) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        // Send the result as JSON
        res.json({ projects: rows });
    });
});

// |POST|: a new project
app.post('/projects', (req, res) => {
    const { title, description, progress, image, githubLink } = req.body;

    // Simple validation (check if required fields are provided)
    if (!title || !description || !progress || !image || !githubLink) {
        return res.status(400).json({ message: 'All fields are required' });
    }

    // SQL query to insert a new project into the database
    const sql = 'INSERT INTO projects (title, description, progress, image, githubLink) VALUES (?, ?, ?, ?, ?)';

    db.run(sql, [title, description, progress, image, githubLink], function(err) {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        // Return the created project with its ID
        res.status(201).json({
            id: this.lastID, // ID generated by SQLite for the new project
            title,
            description,
            progress,
            image,
            githubLink
        });
    });
});

// Serve the application on port 5000
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
